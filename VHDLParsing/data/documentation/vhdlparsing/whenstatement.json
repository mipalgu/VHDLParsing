{"abstract":[{"type":"text","text":"An expression using a "},{"type":"codeVoice","code":"when"},{"type":"text","text":" conditional."}],"hierarchy":{"paths":[["doc:\/\/VHDLParsing\/documentation\/VHDLParsing"]]},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/VHDLParsing\/Se","doc:\/\/VHDLParsing\/SE","doc:\/\/VHDLParsing\/SQ","doc:\/\/VHDLParsing\/SH","doc:\/\/VHDLParsing\/SY","doc:\/\/VHDLParsing\/s8SendableP"],"kind":"relationships"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WhenStatement","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type represents asynchronous statements that are conditionally assigned under specific conditions."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"WhenStatement"},{"type":"text","text":" with condition "},{"type":"codeVoice","code":"A"},{"type":"text","text":" and value "},{"type":"codeVoice","code":"B"},{"type":"text","text":" is equivalent to the following VHDL:"}]},{"type":"codeListing","syntax":"VHDL","code":["B when A"]},{"type":"paragraph","inlineContent":[{"text":"It can be used in assignment operations thus: ","type":"text"},{"type":"codeVoice","code":"C <= B when A;"},{"text":".","type":"text"}]},{"type":"aside","style":"note","name":"See Also","content":[{"inlineContent":[{"type":"text","text":""},{"type":"reference","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/Expression","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"content"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/init(condition:value:)","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/init(rawValue:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/condition","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/rawValue","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/value"]},{"title":"Default Implementations","identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/Equatable-Implementations","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/RawRepresentable-Implementations"],"generated":true}],"seeAlsoSections":[{"title":"Asynchronous Blocks","identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousBlock","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousExpression","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousStatement","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ComponentInstantiation","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ForGenerate","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenerateBlock","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenericMap","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenericVariableMap","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/PortMap","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ProcessBlock","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenElseStatement"],"generated":true}],"kind":"symbol","variants":[{"paths":["\/documentation\/vhdlparsing\/whenstatement"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"metadata":{"roleHeading":"Structure","title":"WhenStatement","externalID":"s:11VHDLParsing13WhenStatementV","modules":[{"name":"VHDLParsing"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WhenStatement","kind":"identifier"}],"navigatorTitle":[{"text":"WhenStatement","kind":"identifier"}],"symbolKind":"struct"},"references":{"doc://VHDLParsing/documentation/VHDLParsing/ComponentInstantiation":{"url":"\/documentation\/vhdlparsing\/componentinstantiation","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ComponentInstantiation"}],"type":"topic","title":"ComponentInstantiation","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ComponentInstantiation"}],"abstract":[{"text":"A component instantiation in ","type":"text"},{"type":"codeVoice","code":"VHDL"},{"text":".","type":"text"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ComponentInstantiation","role":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/AsynchronousStatement":{"kind":"symbol","abstract":[{"type":"text","text":"A statement that can exist within asynchronous code."}],"role":"symbol","navigatorTitle":[{"text":"AsynchronousStatement","kind":"identifier"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousStatement","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousStatement","kind":"identifier"}],"type":"topic","title":"AsynchronousStatement","url":"\/documentation\/vhdlparsing\/asynchronousstatement"},"doc://VHDLParsing/documentation/VHDLParsing/GenerateBlock":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenerateBlock","title":"GenerateBlock","url":"\/documentation\/vhdlparsing\/generateblock","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenerateBlock"}],"navigatorTitle":[{"kind":"identifier","text":"GenerateBlock"}],"abstract":[{"text":"A block that contains a generate statement.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/GenericVariableMap":{"title":"GenericVariableMap","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenericVariableMap","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenericVariableMap"}],"abstract":[{"type":"text","text":"An operation that maps 2 generics together."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"GenericVariableMap"}],"kind":"symbol","url":"\/documentation\/vhdlparsing\/genericvariablemap","type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement/init(condition:value:)":{"abstract":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"WhenStatement"},{"type":"text","text":" from a condition and a value."}],"title":"init(condition:value:)","kind":"symbol","role":"symbol","url":"\/documentation\/vhdlparsing\/whenstatement\/init(condition:value:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"condition"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11VHDLParsing10ExpressionO","text":"Expression"},{"kind":"text","text":", "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11VHDLParsing10ExpressionO","text":"Expression"},{"kind":"text","text":")"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/init(condition:value:)","type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing/GenericMap":{"title":"GenericMap","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenericMap","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenericMap"}],"abstract":[{"text":"A ","type":"text"},{"code":"generic map","type":"codeVoice"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"VHDL"},{"text":".","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"GenericMap"}],"kind":"symbol","url":"\/documentation\/vhdlparsing\/genericmap","type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing":{"kind":"symbol","url":"\/documentation\/vhdlparsing","abstract":[],"role":"collection","title":"VHDLParsing","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing","type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement","title":"WhenStatement","url":"\/documentation\/vhdlparsing\/whenstatement","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WhenStatement"}],"navigatorTitle":[{"kind":"identifier","text":"WhenStatement"}],"abstract":[{"text":"An expression using a ","type":"text"},{"type":"codeVoice","code":"when"},{"text":" conditional.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/PortMap":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/PortMap","title":"PortMap","url":"\/documentation\/vhdlparsing\/portmap","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PortMap"}],"navigatorTitle":[{"kind":"identifier","text":"PortMap"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"port map"},{"text":" declaration in ","type":"text"},{"type":"codeVoice","code":"VHDL"},{"text":".","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/Se":{"title":"Swift.Decodable","identifier":"doc:\/\/VHDLParsing\/Se","type":"unresolvable"},"doc://VHDLParsing/SY":{"title":"Swift.RawRepresentable","identifier":"doc:\/\/VHDLParsing\/SY","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/WhenElseStatement":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenElseStatement","title":"WhenElseStatement","url":"\/documentation\/vhdlparsing\/whenelsestatement","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WhenElseStatement"}],"navigatorTitle":[{"kind":"identifier","text":"WhenElseStatement"}],"abstract":[{"text":"A type for representing asynchronous ","type":"text"},{"type":"codeVoice","code":"when"},{"text":" statements with an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" clause.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/VHDLParsing\/s8SendableP","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement/rawValue":{"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"rawValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"type":"topic","kind":"symbol","title":"rawValue","url":"\/documentation\/vhdlparsing\/whenstatement\/rawvalue","abstract":[{"text":"The equivalent ","type":"text"},{"type":"codeVoice","code":"VHDL"},{"type":"text","text":" code for this statement."}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/rawValue"},"doc://VHDLParsing/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/VHDLParsing\/SH","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement/RawRepresentable-Implementations":{"kind":"article","abstract":[],"title":"RawRepresentable Implementations","url":"\/documentation\/vhdlparsing\/whenstatement\/rawrepresentable-implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/RawRepresentable-Implementations"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement/condition":{"url":"\/documentation\/vhdlparsing\/whenstatement\/condition","type":"topic","abstract":[{"type":"text","text":"The condition that must evaluate to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for the value to be assigned."}],"kind":"symbol","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/condition","role":"symbol","title":"condition","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"condition","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Expression","preciseIdentifier":"s:11VHDLParsing10ExpressionO","kind":"typeIdentifier"}]},"doc://VHDLParsing/documentation/VHDLParsing/Expression":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Expression"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Expression"}],"type":"topic","title":"Expression","role":"symbol","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/Expression","abstract":[{"text":"An ","type":"text"},{"code":"Expression","type":"codeVoice"},{"text":" represents a stand-alone statement that resolves to some value in ","type":"text"},{"code":"VHDL","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/vhdlparsing\/expression"},"doc://VHDLParsing/documentation/VHDLParsing/AsynchronousBlock":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousBlock","title":"AsynchronousBlock","url":"\/documentation\/vhdlparsing\/asynchronousblock","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousBlock"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousBlock"}],"abstract":[{"text":"A block of code that exists within an architecture body.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/SE":{"title":"Swift.Encodable","identifier":"doc:\/\/VHDLParsing\/SE","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement/init(rawValue:)":{"abstract":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"WhenStatement"},{"type":"text","text":" from a "},{"type":"codeVoice","code":"VHDL"},{"type":"text","text":" code string."}],"title":"init(rawValue:)","kind":"symbol","role":"symbol","url":"\/documentation\/vhdlparsing\/whenstatement\/init(rawvalue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"rawValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":")"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/init(rawValue:)","type":"topic"},"doc://VHDLParsing/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/VHDLParsing\/SQ","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement/Equatable-Implementations":{"abstract":[],"title":"Equatable Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/vhdlparsing\/whenstatement\/equatable-implementations","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/Equatable-Implementations","type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing/ForGenerate":{"kind":"symbol","abstract":[{"type":"text","text":"A generate expression utilising a "},{"code":"For","type":"codeVoice"},{"type":"text","text":" loop."}],"role":"symbol","navigatorTitle":[{"text":"ForGenerate","kind":"identifier"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ForGenerate","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForGenerate","kind":"identifier"}],"type":"topic","title":"ForGenerate","url":"\/documentation\/vhdlparsing\/forgenerate"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement/value":{"abstract":[{"type":"text","text":"The value to assign when "},{"type":"codeVoice","code":"condition"},{"type":"text","text":" is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"title":"value","kind":"symbol","role":"symbol","url":"\/documentation\/vhdlparsing\/whenstatement\/value","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11VHDLParsing10ExpressionO","text":"Expression"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement\/value","type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing/ProcessBlock":{"kind":"symbol","abstract":[{"type":"text","text":"A struct for representing a process block."}],"role":"symbol","navigatorTitle":[{"text":"ProcessBlock","kind":"identifier"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ProcessBlock","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ProcessBlock","kind":"identifier"}],"type":"topic","title":"ProcessBlock","url":"\/documentation\/vhdlparsing\/processblock"},"doc://VHDLParsing/documentation/VHDLParsing/WhenBlock":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock","title":"WhenBlock","url":"\/documentation\/vhdlparsing\/whenblock","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"WhenBlock"}],"navigatorTitle":[{"kind":"identifier","text":"WhenBlock"}],"abstract":[{"text":"A type for representing possible when statements.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/AsynchronousExpression":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousExpression"}],"title":"AsynchronousExpression","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsynchronousExpression"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousExpression","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Expressions that can be used in asynchronous code."}],"url":"\/documentation\/vhdlparsing\/asynchronousexpression"}}}