{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"indirect"},{"kind":"text","text":" "},{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"WhenBlock"}]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"name":"See Also","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"isActive":true,"type":"reference","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenElseStatement"},{"type":"text","text":"."}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/VHDLParsing\/Se","doc:\/\/VHDLParsing\/SE","doc:\/\/VHDLParsing\/SQ","doc:\/\/VHDLParsing\/SH","doc:\/\/VHDLParsing\/SY","doc:\/\/VHDLParsing\/s8SendableP"],"title":"Conforms To","type":"conformsTo"}],"seeAlsoSections":[{"identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousBlock","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousExpression","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousStatement","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ComponentInstantiation","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ForGenerate","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenerateBlock","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenericMap","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenericVariableMap","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/PortMap","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ProcessBlock","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenElseStatement","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement"],"title":"Asynchronous Blocks","generated":true}],"abstract":[{"text":"A type for representing possible when statements.","type":"text"}],"sections":[],"kind":"symbol","identifier":{"url":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/VHDLParsing\/documentation\/VHDLParsing"]]},"topicSections":[{"identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/when(statement:)","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/whenElse(statement:)"],"title":"Enumeration Cases"},{"identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/init(rawValue:)"],"title":"Initializers"},{"identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/rawValue"],"title":"Instance Properties"},{"identifiers":["doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/Equatable-Implementations","doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/RawRepresentable-Implementations"],"title":"Default Implementations","generated":true}],"variants":[{"paths":["\/documentation\/vhdlparsing\/whenblock"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","roleHeading":"Enumeration","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WhenBlock","kind":"identifier"}],"title":"WhenBlock","symbolKind":"enum","modules":[{"name":"VHDLParsing"}],"navigatorTitle":[{"text":"WhenBlock","kind":"identifier"}],"externalID":"s:11VHDLParsing9WhenBlockO"},"references":{"doc://VHDLParsing/documentation/VHDLParsing/WhenBlock":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock","title":"WhenBlock","url":"\/documentation\/vhdlparsing\/whenblock","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"WhenBlock"}],"navigatorTitle":[{"kind":"identifier","text":"WhenBlock"}],"abstract":[{"text":"A type for representing possible when statements.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/GenerateBlock":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenerateBlock","title":"GenerateBlock","url":"\/documentation\/vhdlparsing\/generateblock","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenerateBlock"}],"navigatorTitle":[{"kind":"identifier","text":"GenerateBlock"}],"abstract":[{"text":"A block that contains a generate statement.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/PortMap":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/PortMap","title":"PortMap","url":"\/documentation\/vhdlparsing\/portmap","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PortMap"}],"navigatorTitle":[{"kind":"identifier","text":"PortMap"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"port map"},{"text":" declaration in ","type":"text"},{"type":"codeVoice","code":"VHDL"},{"text":".","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/VHDLParsing\/SQ","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/ForGenerate":{"kind":"symbol","abstract":[{"type":"text","text":"A generate expression utilising a "},{"code":"For","type":"codeVoice"},{"type":"text","text":" loop."}],"role":"symbol","navigatorTitle":[{"text":"ForGenerate","kind":"identifier"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ForGenerate","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForGenerate","kind":"identifier"}],"type":"topic","title":"ForGenerate","url":"\/documentation\/vhdlparsing\/forgenerate"},"doc://VHDLParsing/documentation/VHDLParsing/WhenBlock/init(rawValue:)":{"role":"symbol","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/init(rawValue:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"rawValue"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":")"}],"title":"init(rawValue:)","url":"\/documentation\/vhdlparsing\/whenblock\/init(rawvalue:)","abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"WhenBlock"},{"type":"text","text":" from the specified "},{"type":"codeVoice","code":"VHDL"},{"type":"text","text":" code."}],"type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing/WhenStatement":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenStatement","title":"WhenStatement","url":"\/documentation\/vhdlparsing\/whenstatement","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WhenStatement"}],"navigatorTitle":[{"kind":"identifier","text":"WhenStatement"}],"abstract":[{"text":"An expression using a ","type":"text"},{"type":"codeVoice","code":"when"},{"text":" conditional.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/WhenBlock/RawRepresentable-Implementations":{"url":"\/documentation\/vhdlparsing\/whenblock\/rawrepresentable-implementations","role":"collectionGroup","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/RawRepresentable-Implementations","title":"RawRepresentable Implementations"},"doc://VHDLParsing/Se":{"title":"Swift.Decodable","identifier":"doc:\/\/VHDLParsing\/Se","type":"unresolvable"},"doc://VHDLParsing/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/VHDLParsing\/s8SendableP","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/WhenBlock/when(statement:)":{"abstract":[{"type":"text","text":"A simple when-statement with no else."}],"url":"\/documentation\/vhdlparsing\/whenblock\/when(statement:)","role":"symbol","type":"topic","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/when(statement:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"when"},{"kind":"text","text":"("},{"kind":"externalParam","text":"statement"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11VHDLParsing13WhenStatementV","text":"WhenStatement"},{"kind":"text","text":")"}],"title":"WhenBlock.when(statement:)","kind":"symbol"},"doc://VHDLParsing/SE":{"title":"Swift.Encodable","identifier":"doc:\/\/VHDLParsing\/SE","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/AsynchronousExpression":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousExpression"}],"title":"AsynchronousExpression","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsynchronousExpression"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousExpression","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Expressions that can be used in asynchronous code."}],"url":"\/documentation\/vhdlparsing\/asynchronousexpression"},"doc://VHDLParsing/documentation/VHDLParsing/ProcessBlock":{"kind":"symbol","abstract":[{"type":"text","text":"A struct for representing a process block."}],"role":"symbol","navigatorTitle":[{"text":"ProcessBlock","kind":"identifier"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ProcessBlock","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ProcessBlock","kind":"identifier"}],"type":"topic","title":"ProcessBlock","url":"\/documentation\/vhdlparsing\/processblock"},"doc://VHDLParsing/documentation/VHDLParsing/AsynchronousStatement":{"kind":"symbol","abstract":[{"type":"text","text":"A statement that can exist within asynchronous code."}],"role":"symbol","navigatorTitle":[{"text":"AsynchronousStatement","kind":"identifier"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousStatement","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsynchronousStatement","kind":"identifier"}],"type":"topic","title":"AsynchronousStatement","url":"\/documentation\/vhdlparsing\/asynchronousstatement"},"doc://VHDLParsing/SY":{"title":"Swift.RawRepresentable","identifier":"doc:\/\/VHDLParsing\/SY","type":"unresolvable"},"doc://VHDLParsing/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/VHDLParsing\/SH","type":"unresolvable"},"doc://VHDLParsing/documentation/VHDLParsing/AsynchronousBlock":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/AsynchronousBlock","title":"AsynchronousBlock","url":"\/documentation\/vhdlparsing\/asynchronousblock","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsynchronousBlock"}],"navigatorTitle":[{"kind":"identifier","text":"AsynchronousBlock"}],"abstract":[{"text":"A block of code that exists within an architecture body.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/WhenElseStatement":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenElseStatement","title":"WhenElseStatement","url":"\/documentation\/vhdlparsing\/whenelsestatement","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WhenElseStatement"}],"navigatorTitle":[{"kind":"identifier","text":"WhenElseStatement"}],"abstract":[{"text":"A type for representing asynchronous ","type":"text"},{"type":"codeVoice","code":"when"},{"text":" statements with an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" clause.","type":"text"}],"kind":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/GenericMap":{"title":"GenericMap","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenericMap","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenericMap"}],"abstract":[{"text":"A ","type":"text"},{"code":"generic map","type":"codeVoice"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"VHDL"},{"text":".","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"GenericMap"}],"kind":"symbol","url":"\/documentation\/vhdlparsing\/genericmap","type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing":{"kind":"symbol","url":"\/documentation\/vhdlparsing","abstract":[],"role":"collection","title":"VHDLParsing","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing","type":"topic"},"doc://VHDLParsing/documentation/VHDLParsing/WhenBlock/rawValue":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/rawValue","type":"topic","abstract":[{"type":"text","text":"The equivalent "},{"type":"codeVoice","code":"VHDL"},{"type":"text","text":" code for this statement."}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"rawValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"role":"symbol","url":"\/documentation\/vhdlparsing\/whenblock\/rawvalue","kind":"symbol","title":"rawValue"},"doc://VHDLParsing/documentation/VHDLParsing/ComponentInstantiation":{"url":"\/documentation\/vhdlparsing\/componentinstantiation","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ComponentInstantiation"}],"type":"topic","title":"ComponentInstantiation","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ComponentInstantiation"}],"abstract":[{"text":"A component instantiation in ","type":"text"},{"type":"codeVoice","code":"VHDL"},{"text":".","type":"text"}],"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/ComponentInstantiation","role":"symbol"},"doc://VHDLParsing/documentation/VHDLParsing/WhenBlock/Equatable-Implementations":{"abstract":[],"role":"collectionGroup","url":"\/documentation\/vhdlparsing\/whenblock\/equatable-implementations","kind":"article","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/Equatable-Implementations","type":"topic","title":"Equatable Implementations"},"doc://VHDLParsing/documentation/VHDLParsing/WhenBlock/whenElse(statement:)":{"identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/WhenBlock\/whenElse(statement:)","url":"\/documentation\/vhdlparsing\/whenblock\/whenelse(statement:)","type":"topic","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"whenElse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"statement","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11VHDLParsing17WhenElseStatementV","text":"WhenElseStatement","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"WhenBlock.whenElse(statement:)","kind":"symbol","abstract":[{"text":"A when-statement with an else.","type":"text"}]},"doc://VHDLParsing/documentation/VHDLParsing/GenericVariableMap":{"title":"GenericVariableMap","identifier":"doc:\/\/VHDLParsing\/documentation\/VHDLParsing\/GenericVariableMap","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenericVariableMap"}],"abstract":[{"type":"text","text":"An operation that maps 2 generics together."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"GenericVariableMap"}],"kind":"symbol","url":"\/documentation\/vhdlparsing\/genericvariablemap","type":"topic"}}}