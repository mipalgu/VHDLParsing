{"interfaceLanguages":{"swift":[{"children":[{"title":"Definitions and Primitive Values","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argument\/init(label:argument:)","title":"init(label: VariableName?, argument: Expression)","type":"init"},{"path":"\/documentation\/vhdlparsing\/argument\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argument\/argument","title":"let argument: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/argument\/label","title":"let label: VariableName?","type":"property"},{"path":"\/documentation\/vhdlparsing\/argument\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argument\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/argument\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argument\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argument\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argument\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/argument\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/argument","title":"Argument","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/init(name:type:defaultvalue:)","title":"init(name: VariableName, type: Type, defaultValue: Expression?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/defaultvalue","title":"let defaultValue: Expression?","type":"property"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/type","title":"let type: Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/argumentdefinition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/argumentdefinition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/argumentdefinition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/argumentdefinition","title":"ArgumentDefinition","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/init(name:size:elementtype:)","title":"init(name: VariableName, size: [VectorSize], elementType: Type)","type":"init"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/elementtype","title":"let elementType: Type","type":"property"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/size","title":"let size: [VectorSize]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/arraydefinition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/arraydefinition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/arraydefinition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/arraydefinition","title":"ArrayDefinition","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/high","title":"case high","type":"case"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/low","title":"case low","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/inverted","title":"var inverted: BitLiteral","type":"property"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/vectorliteral","title":"var vectorLiteral: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/bitversion(of:bitsrequired:)","title":"static func bitVersion(of: Int, bitsRequired: Int) -> [BitLiteral]","type":"method"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/bitsrequired(for:)","title":"static func bitsRequired(for: Int) -> Int?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/bitliteral\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitliteral\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/bitliteral\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/bitliteral","title":"BitLiteral","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitvector\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/bitvector\/init(values:)","title":"init(values: [BitLiteral])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitvector\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/vhdlparsing\/bitvector\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/bitvector\/values","title":"let values: [BitLiteral]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitvector\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/bitvector\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitvector\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitvector\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/bitvector\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/bitvector\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/bitvector","title":"BitVector","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comment\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comment\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/comment\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/comment\/text","title":"let text: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/comment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comment\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comment\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comment\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/comment\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/comment","title":"Comment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/init(name:port:generic:)","title":"init(name: VariableName, port: PortBlock, generic: GenericBlock?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/generic","title":"let generic: GenericBlock?","type":"property"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/port","title":"let port: PortBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/componentdefinition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentdefinition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/componentdefinition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/componentdefinition","title":"ComponentDefinition","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/init(name:type:value:comment:)-2tfkq","title":"init?(name: VariableName, type: SignalType, value: Expression, comment: Comment?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/init(name:type:value:comment:)-9t93a","title":"init?(name: VariableName, type: Type, value: Expression, comment: Comment?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/comment","title":"let comment: Comment?","type":"property"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/type","title":"let type: Type","type":"property"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/value","title":"let value: Expression","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/rawvalue-swift.typealias","title":"ConstantSignal.RawValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/constantsignal\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/constantsignal\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/constantsignal\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/constantsignal","title":"ConstantSignal","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/definition\/component(value:)","title":"case component(value: ComponentDefinition)","type":"case"},{"path":"\/documentation\/vhdlparsing\/definition\/constant(value:)","title":"case constant(value: ConstantSignal)","type":"case"},{"path":"\/documentation\/vhdlparsing\/definition\/function(value:)","title":"case function(value: FunctionDefinition)","type":"case"},{"path":"\/documentation\/vhdlparsing\/definition\/signal(value:)","title":"case signal(value: LocalSignal)","type":"case"},{"path":"\/documentation\/vhdlparsing\/definition\/type(value:)","title":"case type(value: TypeDefinition)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/definition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/definition\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/definition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/definition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/definition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/definition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/definition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/definition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/definition","title":"Definition","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/init(name:nonemptyvalues:)","title":"init?(name: VariableName, nonEmptyValues: [VariableName])","type":"init"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/values","title":"let values: [VariableName]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/enumerationdefinition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/enumerationdefinition","title":"EnumerationDefinition","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/externaltype\/mode","title":"var mode: Mode","type":"property"}],"path":"\/documentation\/vhdlparsing\/externaltype","title":"ExternalType","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/init(name:arguments:returntype:)","title":"init(name: VariableName, arguments: [ArgumentDefinition], returnType: Type)","type":"init"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/arguments","title":"let arguments: [ArgumentDefinition]","type":"property"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/returntype","title":"let returnType: Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/functiondefinition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functiondefinition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/functiondefinition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/functiondefinition","title":"FunctionDefinition","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/init(definition:body:)","title":"init(definition: FunctionDefinition, body: SynchronousBlock)","type":"init"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/init(name:arguments:returntube:body:)","title":"init(name: VariableName, arguments: [ArgumentDefinition], returnTube: Type, body: SynchronousBlock)","type":"init"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/init(name:arguments:returntype:body:)","title":"init(name: VariableName, arguments: [ArgumentDefinition], returnType: Type, body: SynchronousBlock)","type":"init"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/arguments","title":"let arguments: [ArgumentDefinition]","type":"property"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/body","title":"let body: SynchronousBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/returntype","title":"let returnType: Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/functionimplementation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functionimplementation\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/functionimplementation\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/functionimplementation","title":"FunctionImplementation","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/genericblock\/init(types:)","title":"init(types: [GenericTypeDeclaration])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericblock\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/genericblock\/types","title":"let types: [GenericTypeDeclaration]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/genericblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/genericblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/genericblock","title":"GenericBlock","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/init(name:type:defaultvalue:)","title":"init(name: VariableName, type: SignalType, defaultValue: Expression?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/defaultvalue","title":"let defaultValue: Expression?","type":"property"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/type","title":"let type: SignalType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/generictypedeclaration\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/generictypedeclaration","title":"GenericTypeDeclaration","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/headstatement\/comment(value:)","title":"case comment(value: Comment)","type":"case"},{"path":"\/documentation\/vhdlparsing\/headstatement\/definition(value:)","title":"case definition(value: Definition)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/headstatement\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/headstatement\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/headstatement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/headstatement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/headstatement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/headstatement\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/headstatement\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/headstatement\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/headstatement","title":"HeadStatement","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/eight","title":"case eight","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/eleven","title":"case eleven","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/fifteen","title":"case fifteen","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/five","title":"case five","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/four","title":"case four","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/fourteen","title":"case fourteen","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/nine","title":"case nine","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/one","title":"case one","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/seven","title":"case seven","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/six","title":"case six","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/ten","title":"case ten","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/thirteen","title":"case thirteen","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/three","title":"case three","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/twelve","title":"case twelve","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/two","title":"case two","type":"case"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/zero","title":"case zero","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/init(bits:)","title":"init?(bits: [BitLiteral])","type":"init"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/init(rawvalue:)","title":"init?(rawValue: Character)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/bits","title":"var bits: [BitLiteral]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/hexliteral\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexliteral\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/vhdlparsing\/hexliteral\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/hexliteral","title":"HexLiteral","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexvector\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/hexvector\/init(values:)","title":"init(values: [HexLiteral])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexvector\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/hexvector\/values","title":"let values: [HexLiteral]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexvector\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/hexvector\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexvector\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexvector\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/hexvector\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/hexvector\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/hexvector","title":"HexVector","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/includecomponent\/all","title":"case all","type":"case"},{"path":"\/documentation\/vhdlparsing\/includecomponent\/module(name:)","title":"case module(name: VariableName)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/includecomponent\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/includecomponent\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/includecomponent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/includecomponent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/includecomponent\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/includecomponent\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/includecomponent\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/includecomponent\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/includecomponent","title":"IncludeComponent","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/localsignal\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/localsignal\/init(type:name:defaultvalue:comment:)-16kp0","title":"init(type: Type, name: VariableName, defaultValue: Expression?, comment: Comment?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/localsignal\/init(type:name:defaultvalue:comment:)-467e1","title":"init(type: SignalType, name: VariableName, defaultValue: Expression?, comment: Comment?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/localsignal\/comment","title":"var comment: Comment?","type":"property"},{"path":"\/documentation\/vhdlparsing\/localsignal\/defaultvalue","title":"var defaultValue: Expression?","type":"property"},{"path":"\/documentation\/vhdlparsing\/localsignal\/name","title":"var name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/localsignal\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/localsignal\/type","title":"var type: Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/localsignal\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/localsignal\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/localsignal\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/localsignal\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/localsignal\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/localsignal\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/localsignal","title":"LocalSignal","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/dontcare","title":"case dontCare","type":"case"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/high","title":"case high","type":"case"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/highimpedance","title":"case highImpedance","type":"case"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/low","title":"case low","type":"case"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/uninitialized","title":"case uninitialized","type":"case"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/unknown","title":"case unknown","type":"case"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/weaksignal","title":"case weakSignal","type":"case"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/weaksignalhigh","title":"case weakSignalHigh","type":"case"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/weaksignallow","title":"case weakSignalLow","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/init(bit:)","title":"init(bit: BitLiteral)","type":"init"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/vectorliteral","title":"var vectorLiteral: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/logicliteral\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicliteral\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/logicliteral\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/logicliteral","title":"LogicLiteral","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicvector\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/logicvector\/init(values:)","title":"init(values: [LogicLiteral])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicvector\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/vhdlparsing\/logicvector\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/logicvector\/values","title":"let values: [LogicLiteral]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicvector\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/logicvector\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicvector\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicvector\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/logicvector\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/logicvector\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/logicvector","title":"LogicVector","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mode\/buffer","title":"case buffer","type":"case"},{"path":"\/documentation\/vhdlparsing\/mode\/input","title":"case input","type":"case"},{"path":"\/documentation\/vhdlparsing\/mode\/inputoutput","title":"case inputoutput","type":"case"},{"path":"\/documentation\/vhdlparsing\/mode\/output","title":"case output","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mode\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/mode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mode\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mode\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mode\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/mode\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/mode","title":"Mode","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/five","title":"case five","type":"case"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/four","title":"case four","type":"case"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/one","title":"case one","type":"case"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/seven","title":"case seven","type":"case"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/six","title":"case six","type":"case"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/three","title":"case three","type":"case"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/two","title":"case two","type":"case"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/zero","title":"case zero","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/init(bits:)","title":"init?(bits: [BitLiteral])","type":"init"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/init(rawvalue:)","title":"init?(rawValue: Character)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/bits","title":"var bits: [BitLiteral]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/octalliteral\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalliteral\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/vhdlparsing\/octalliteral\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/octalliteral","title":"OctalLiteral","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalvector\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/octalvector\/init(values:)","title":"init(values: [OctalLiteral])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalvector\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/octalvector\/values","title":"let values: [OctalLiteral]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalvector\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/octalvector\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalvector\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalvector\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/octalvector\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/octalvector\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/octalvector","title":"OctalVector","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/blocks(values:)","title":"case blocks(values: [PackageBodyBlock])","type":"case"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/comment(value:)","title":"case comment(value: Comment)","type":"case"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/constant(value:)","title":"case constant(value: ConstantSignal)","type":"case"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/fndefinition(value:)","title":"case fnDefinition(value: FunctionDefinition)","type":"case"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/fnimplementation(value:)","title":"case fnImplementation(value: FunctionImplementation)","type":"case"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/include(statement:)","title":"case include(statement: UseStatement)","type":"case"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/type(value:)","title":"case type(value: TypeDefinition)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/packagebodyblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebodyblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/packagebodyblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/packagebodyblock","title":"PackageBodyBlock","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/portblock\/init(signals:)","title":"init?(signals: [PortSignal])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portblock\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/portblock\/signals","title":"let signals: [PortSignal]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/portblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/portblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/portblock","title":"PortBlock","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portsignal\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/portsignal\/init(type:name:mode:defaultvalue:comment:)-9bcce","title":"init(type: Type, name: VariableName, mode: Mode, defaultValue: Expression?, comment: Comment?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/portsignal\/init(type:name:mode:defaultvalue:comment:)-9i1la","title":"init(type: SignalType, name: VariableName, mode: Mode, defaultValue: Expression?, comment: Comment?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portsignal\/comment","title":"var comment: Comment?","type":"property"},{"path":"\/documentation\/vhdlparsing\/portsignal\/defaultvalue","title":"var defaultValue: Expression?","type":"property"},{"path":"\/documentation\/vhdlparsing\/portsignal\/mode","title":"var mode: Mode","type":"property"},{"path":"\/documentation\/vhdlparsing\/portsignal\/name","title":"var name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/portsignal\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/portsignal\/type","title":"var type: Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portsignal\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/portsignal\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portsignal\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portsignal\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portsignal\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/portsignal\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/portsignal","title":"PortSignal","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/bitvector(size:)","title":"case bitVector(size: VectorSize)","type":"case"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/integer(size:)","title":"case integer(size: VectorSize)","type":"case"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/signed(size:)","title":"case signed(size: VectorSize)","type":"case"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/stdlogicvector(size:)","title":"case stdLogicVector(size: VectorSize)","type":"case"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/stdulogicvector(size:)","title":"case stdULogicVector(size: VectorSize)","type":"case"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/unsigned(size:)","title":"case unsigned(size: VectorSize)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/size","title":"var size: VectorSize","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/rawvalue-swift.typealias","title":"RangedType.RawValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vhdlparsing\/rangedtype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/rangedtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/rangedtype\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/rangedtype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/rangedtype","title":"RangedType","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/record\/init(name:types:)","title":"init(name: VariableName, types: [RecordTypeDeclaration])","type":"init"},{"path":"\/documentation\/vhdlparsing\/record\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/record\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/record\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/record\/types","title":"let types: [RecordTypeDeclaration]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/record\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/record\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/record\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/record\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/record\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/record\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/record","title":"Record","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/init(name:type:)","title":"init(name: VariableName, type: Type)","type":"init"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/type","title":"let type: Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/recordtypedeclaration\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/recordtypedeclaration","title":"RecordTypeDeclaration","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/==(_:_:)","title":"static func == (SignalLiteral, SignalLiteral) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/bit(value:)","title":"case bit(value: BitLiteral)","type":"case"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/boolean(value:)","title":"case boolean(value: Bool)","type":"case"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/decimal(value:)","title":"case decimal(value: Double)","type":"case"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/integer(value:)","title":"case integer(value: Int)","type":"case"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/logic(value:)","title":"case logic(value: LogicLiteral)","type":"case"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/vector(value:)","title":"case vector(value: VectorLiteral)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/isvalid(for:)","title":"func isValid(for: SignalType) -> Bool","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/rawvalue-swift.typealias","title":"SignalLiteral.RawValue","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/default(for:)","title":"static func `default`(for: SignalType) -> SignalLiteral","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vhdlparsing\/signalliteral\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/signalliteral\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signalliteral\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/signalliteral\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/signalliteral","title":"SignalLiteral","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/bit","title":"case bit","type":"case"},{"path":"\/documentation\/vhdlparsing\/signaltype\/boolean","title":"case boolean","type":"case"},{"path":"\/documentation\/vhdlparsing\/signaltype\/integer","title":"case integer","type":"case"},{"path":"\/documentation\/vhdlparsing\/signaltype\/natural","title":"case natural","type":"case"},{"path":"\/documentation\/vhdlparsing\/signaltype\/positive","title":"case positive","type":"case"},{"path":"\/documentation\/vhdlparsing\/signaltype\/ranged(type:)","title":"case ranged(type: RangedType)","type":"case"},{"path":"\/documentation\/vhdlparsing\/signaltype\/real","title":"case real","type":"case"},{"path":"\/documentation\/vhdlparsing\/signaltype\/stdlogic","title":"case stdLogic","type":"case"},{"path":"\/documentation\/vhdlparsing\/signaltype\/stdulogic","title":"case stdULogic","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/rawvalue-swift.typealias","title":"SignalType.RawValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vhdlparsing\/signaltype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/signaltype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/signaltype\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/signaltype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/signaltype","title":"SignalType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/type\/alias(name:)","title":"case alias(name: VariableName)","type":"case"},{"path":"\/documentation\/vhdlparsing\/type\/member(components:)","title":"case member(components: [VariableName])","type":"case"},{"path":"\/documentation\/vhdlparsing\/type\/signal(type:)","title":"case signal(type: SignalType)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/type\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/type\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/type\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/type\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/type\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/type\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/type\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/type\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/type","title":"Type","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/alias(name:type:)","title":"case alias(name: VariableName, type: SignalType)","type":"case"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/array(value:)","title":"case array(value: ArrayDefinition)","type":"case"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/enumeration(value:)","title":"case enumeration(value: EnumerationDefinition)","type":"case"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/record(value:)","title":"case record(value: Record)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/typedefinition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/typedefinition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/typedefinition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/typedefinition","title":"TypeDefinition","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/usestatement\/init(nonemptycomponents:)","title":"init?(nonEmptyComponents: [IncludeComponent])","type":"init"},{"path":"\/documentation\/vhdlparsing\/usestatement\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/usestatement\/components","title":"let components: [IncludeComponent]","type":"property"},{"path":"\/documentation\/vhdlparsing\/usestatement\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/usestatement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/usestatement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/usestatement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/usestatement\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/usestatement\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/usestatement\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/usestatement","title":"UseStatement","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/==(_:_:)","title":"static func == (VariableName, VariableName) -> Bool","type":"op"},{"path":"\/documentation\/vhdlparsing\/variablename\/_(_:_:)-2ixsz","title":"static func < (VariableName, VariableName) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/variablename\/rawvalue","title":"let rawValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/'...(_:)-68rzj","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/vhdlparsing\/variablename\/'...(_:)-9cjpm","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/vhdlparsing\/variablename\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/vhdlparsing\/variablename\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/vhdlparsing\/variablename\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/vhdlparsing\/variablename\/_(_:_:)-6ccuj","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/vhdlparsing\/variablename\/_=(_:_:)-2sdr2","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/vhdlparsing\/variablename\/_=(_:_:)-41n5y","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/variablename\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/variablename\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablename\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/variablename\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/variablename","title":"VariableName","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/==(_:_:)","title":"static func == (VectorLiteral, VectorLiteral) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/bits(value:)","title":"case bits(value: BitVector)","type":"case"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/hexademical(value:)","title":"case hexademical(value: HexVector)","type":"case"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/indexed(values:)","title":"case indexed(values: IndexedVector)","type":"case"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/logics(value:)","title":"case logics(value: LogicVector)","type":"case"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/octal(value:)","title":"case octal(value: OctalVector)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/size","title":"var size: Int?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/rawvalue-swift.typealias","title":"VectorLiteral.RawValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/vectorliteral\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorliteral\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/vectorliteral\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/vectorliteral","title":"VectorLiteral","type":"enum"},{"title":"Basic Arithmetic","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/addition(lhs:rhs:)","title":"case addition(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/concatenate(lhs:rhs:)","title":"case concatenate(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/division(lhs:rhs:)","title":"case division(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/multiplication(lhs:rhs:)","title":"case multiplication(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/subtraction(lhs:rhs:)","title":"case subtraction(lhs: Expression, rhs: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/lhs","title":"var lhs: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/rhs","title":"var rhs: Expression","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/binaryoperation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/binaryoperation\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/binaryoperation\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/binaryoperation","title":"BinaryOperation","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/and(lhs:rhs:)","title":"case and(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/nand(lhs:rhs:)","title":"case nand(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/nor(lhs:rhs:)","title":"case nor(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/not(value:)","title":"case not(value: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/or(lhs:rhs:)","title":"case or(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/xnor(lhs:rhs:)","title":"case xnor(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/xor(lhs:rhs:)","title":"case xor(lhs: Expression, rhs: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/booleanexpression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/booleanexpression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/booleanexpression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/booleanexpression","title":"BooleanExpression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/castoperation\/bit(expression:)","title":"case bit(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/bitvector(expression:)","title":"case bitVector(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/boolean(expression:)","title":"case boolean(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/integer(expression:)","title":"case integer(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/natural(expression:)","title":"case natural(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/positive(expression:)","title":"case positive(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/real(expression:)","title":"case real(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/signed(expression:)","title":"case signed(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/stdlogic(expression:)","title":"case stdLogic(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/stdlogicvector(expression:)","title":"case stdLogicVector(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/stdulogic(expression:)","title":"case stdULogic(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/stdulogicvector(expression:)","title":"case stdULogicVector(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/castoperation\/unsigned(expression:)","title":"case unsigned(expression: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/castoperation\/init(function:arguments:)","title":"init?(function: String, arguments: [Expression])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/castoperation\/expression","title":"var expression: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/castoperation\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/castoperation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/castoperation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/castoperation\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"}],"path":"\/documentation\/vhdlparsing\/castoperation\/functioncallable-implementations","title":"FunctionCallable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/castoperation\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/castoperation\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/castoperation\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/castoperation\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/castoperation","title":"CastOperation","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/equality(lhs:rhs:)","title":"case equality(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/greaterthan(lhs:rhs:)","title":"case greaterThan(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/greaterthanorequal(lhs:rhs:)","title":"case greaterThanOrEqual(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/lessthan(lhs:rhs:)","title":"case lessThan(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/lessthanorequal(lhs:rhs:)","title":"case lessThanOrEqual(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/notequals(lhs:rhs:)","title":"case notEquals(lhs: Expression, rhs: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/comparisonoperation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/comparisonoperation\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/comparisonoperation\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/comparisonoperation","title":"ComparisonOperation","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/comparison(value:)","title":"case comparison(value: ComparisonOperation)","type":"case"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/edge(value:)","title":"case edge(value: EdgeCondition)","type":"case"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/literal(value:)","title":"case literal(value: Bool)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/conditionalexpression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/conditionalexpression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/conditionalexpression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/conditionalexpression","title":"ConditionalExpression","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/init(function:arguments:)","title":"init?(function: String, arguments: [Expression])","type":"init"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/init(name:arguments:)","title":"init(name: VariableName, arguments: [Expression])","type":"init"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/init(name:parameters:)","title":"init(name: VariableName, parameters: [Argument])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/arguments","title":"var arguments: [Expression]","type":"property"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/parameters","title":"let parameters: [Argument]","type":"property"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/customfunctioncall\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"}],"path":"\/documentation\/vhdlparsing\/customfunctioncall\/functioncallable-implementations","title":"FunctionCallable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/customfunctioncall\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/customfunctioncall\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/customfunctioncall","title":"CustomFunctionCall","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/directreference\/member(access:)","title":"case member(access: MemberAccess)","type":"case"},{"path":"\/documentation\/vhdlparsing\/directreference\/variable(name:)","title":"case variable(name: VariableName)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/directreference\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/directreference\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/directreference\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/directreference\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/directreference\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/directreference\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/directreference\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/directreference\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/directreference","title":"DirectReference","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/falling(expression:)","title":"case falling(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/rising(expression:)","title":"case rising(expression: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/expression","title":"var expression: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/edgecondition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/edgecondition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/edgecondition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/edgecondition","title":"EdgeCondition","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/expression\/binary(operation:)","title":"case binary(operation: BinaryOperation)","type":"case"},{"path":"\/documentation\/vhdlparsing\/expression\/cast(operation:)","title":"case cast(operation: CastOperation)","type":"case"},{"path":"\/documentation\/vhdlparsing\/expression\/conditional(condition:)","title":"case conditional(condition: ConditionalExpression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/expression\/functioncall(call:)","title":"case functionCall(call: FunctionCall)","type":"case"},{"path":"\/documentation\/vhdlparsing\/expression\/literal(value:)","title":"case literal(value: SignalLiteral)","type":"case"},{"path":"\/documentation\/vhdlparsing\/expression\/logical(operation:)","title":"case logical(operation: BooleanExpression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/expression\/precedence(value:)","title":"case precedence(value: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/expression\/reference(variable:)","title":"case reference(variable: VariableReference)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/expression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/expression\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/expression\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/expression\/rawvalue-swift.typealias","title":"Expression.RawValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/expression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/expression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/expression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/expression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/expression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/expression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/expression","title":"Expression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functioncall\/custom(function:)","title":"case custom(function: CustomFunctionCall)","type":"case"},{"path":"\/documentation\/vhdlparsing\/functioncall\/mathreal(function:)","title":"case mathReal(function: MathRealFunctionCalls)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functioncall\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functioncall\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functioncall\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/functioncall\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functioncall\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functioncall\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functioncall\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/functioncall\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/functioncall","title":"FunctionCall","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/functioncallable\/init(function:arguments:)","title":"init?(function: String, arguments: [Expression])","type":"init"},{"path":"\/documentation\/vhdlparsing\/functioncallable\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"}],"path":"\/documentation\/vhdlparsing\/functioncallable","title":"FunctionCallable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/init(index:value:)-5n7b5","title":"init(index: VectorIndex, value: SignalLiteral)","type":"init"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/init(index:value:)-ruut","title":"init(index: VectorIndex, value: Expression)","type":"init"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/index","title":"let index: VectorIndex","type":"property"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/value","title":"let value: Expression","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/indexedvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvalue\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/indexedvalue\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/indexedvalue","title":"IndexedValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvector\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/indexedvector\/init(values:)","title":"init(values: [IndexedValue])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvector\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/indexedvector\/values","title":"let values: [IndexedValue]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvector\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/indexedvector\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvector\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvector\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/indexedvector\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/indexedvector\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/indexedvector","title":"IndexedVector","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/ceil(expression:)","title":"case ceil(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/floor(expression:)","title":"case floor(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/fmax(arg0:arg1:)","title":"case fmax(arg0: Expression, arg1: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/fmin(arg0:arg1:)","title":"case fmin(arg0: Expression, arg1: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/round(expression:)","title":"case round(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/sign(expression:)","title":"case sign(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/sqrt(expression:)","title":"case sqrt(expression: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/init(function:arguments:)","title":"init?(function: String, arguments: [Expression])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"}],"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/functioncallable-implementations","title":"FunctionCallable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/mathrealfunctioncalls","title":"MathRealFunctionCalls","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/init(record:member:)","title":"init(record: VariableName, member: DirectReference)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/member","title":"let member: DirectReference","type":"property"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/record","title":"let record: VariableName","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/memberaccess\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/memberaccess\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/memberaccess\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/memberaccess","title":"MemberAccess","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/statement\/assignment(name:value:)","title":"case assignment(name: VariableReference, value: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/statement\/comment(value:)","title":"case comment(value: Comment)","type":"case"},{"path":"\/documentation\/vhdlparsing\/statement\/exit","title":"case exit","type":"case"},{"path":"\/documentation\/vhdlparsing\/statement\/null","title":"case null","type":"case"},{"path":"\/documentation\/vhdlparsing\/statement\/returns(value:)","title":"case returns(value: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/statement\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/statement\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/statement\/rawvalue-swift.typealias","title":"Statement.RawValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/statement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/statement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/statement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/statement\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/statement\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/statement\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/statement","title":"Statement","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/expression(value:)","title":"case expression(value: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/open","title":"case open","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/literal(value:)","title":"static func literal(value: SignalLiteral) -> VariableAssignment","type":"method"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/reference(variable:)","title":"static func reference(variable: VariableReference) -> VariableAssignment","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/variableassignment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variableassignment\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/variableassignment\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/variableassignment","title":"VariableAssignment","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablemap\/init(lhs:rhs:)","title":"init(lhs: VariableReference, rhs: VariableAssignment)","type":"init"},{"path":"\/documentation\/vhdlparsing\/variablemap\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablemap\/lhs","title":"let lhs: VariableReference","type":"property"},{"path":"\/documentation\/vhdlparsing\/variablemap\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/variablemap\/rhs","title":"let rhs: VariableAssignment","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablemap\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/variablemap\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablemap\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablemap\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablemap\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/variablemap\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/variablemap","title":"VariableMap","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablereference\/indexed(name:index:)-swift.enum.case","title":"case indexed(name: Expression, index: VectorIndex)","type":"case"},{"path":"\/documentation\/vhdlparsing\/variablereference\/variable(reference:)","title":"case variable(reference: DirectReference)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablereference\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablereference\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablereference\/indexed(name:index:)-swift.type.method","title":"static func indexed(name: VariableName, index: VectorIndex) -> VariableReference","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablereference\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/variablereference\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablereference\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablereference\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/variablereference\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/variablereference\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/variablereference","title":"VariableReference","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/index(value:)","title":"case index(value: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/others","title":"case others","type":"case"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/range(value:)","title":"case range(value: VectorSize)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/vectorindex\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorindex\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/vectorindex\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/vectorindex","title":"VectorIndex","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/downto(upper:lower:)","title":"case downto(upper: Expression, lower: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/to(lower:upper:)","title":"case to(lower: Expression, upper: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/max","title":"var max: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/min","title":"var min: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/size","title":"var size: Int?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/rawvalue-swift.typealias","title":"VectorSize.RawValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/vectorsize\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vectorsize\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/vectorsize\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/vectorsize","title":"VectorSize","type":"enum"},{"title":"Asynchronous Blocks","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/blocks(blocks:)","title":"case blocks(blocks: [AsynchronousBlock])","type":"case"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/component(block:)","title":"case component(block: ComponentInstantiation)","type":"case"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/function(block:)","title":"case function(block: FunctionImplementation)","type":"case"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/generate(block:)","title":"case generate(block: GenerateBlock)","type":"case"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/process(block:)","title":"case process(block: ProcessBlock)","type":"case"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/statement(statement:)","title":"case statement(statement: AsynchronousStatement)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/asynchronousblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/asynchronousblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/asynchronousblock","title":"AsynchronousBlock","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/expression(value:)","title":"case expression(value: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/whenblock(value:)","title":"case whenBlock(value: WhenBlock)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/asynchronousexpression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/asynchronousexpression","title":"AsynchronousExpression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/assignment(name:value:)","title":"case assignment(name: VariableReference, value: AsynchronousExpression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/comment(value:)","title":"case comment(value: Comment)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/asynchronousstatement\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/asynchronousstatement","title":"AsynchronousStatement","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/init(label:name:port:generic:)","title":"init(label: VariableName, name: VariableName, port: PortMap, generic: GenericMap?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/generic","title":"let generic: GenericMap?","type":"property"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/label","title":"let label: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/port","title":"let port: PortMap","type":"property"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/componentinstantiation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/componentinstantiation\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/componentinstantiation\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/componentinstantiation","title":"ComponentInstantiation","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/init(label:iterator:range:body:)","title":"init(label: VariableName, iterator: VariableName, range: VectorSize, body: AsynchronousBlock)","type":"init"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/body","title":"let body: AsynchronousBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/iterator","title":"let iterator: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/label","title":"let label: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/range","title":"let range: VectorSize","type":"property"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/forgenerate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forgenerate\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/forgenerate\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/forgenerate","title":"ForGenerate","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generateblock\/forloop(block:)","title":"case forLoop(block: ForGenerate)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generateblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generateblock\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generateblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/generateblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generateblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generateblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/generateblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/generateblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/generateblock","title":"GenerateBlock","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericmap\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/genericmap\/init(variables:)","title":"init(variables: [GenericVariableMap])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericmap\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/genericmap\/variables","title":"let variables: [GenericVariableMap]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericmap\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/genericmap\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericmap\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericmap\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericmap\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/genericmap\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/genericmap","title":"GenericMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/init(lhs:rhs:)","title":"init(lhs: VariableReference, rhs: Expression)","type":"init"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/lhs","title":"let lhs: VariableReference","type":"property"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/rhs","title":"let rhs: Expression","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/genericvariablemap\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/genericvariablemap\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/genericvariablemap\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/genericvariablemap","title":"GenericVariableMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portmap\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/portmap\/init(variables:)","title":"init(variables: [VariableMap])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portmap\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/portmap\/variables","title":"let variables: [VariableMap]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portmap\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/portmap\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portmap\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portmap\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/portmap\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/portmap\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/portmap","title":"PortMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/processblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/processblock\/init(sensitivitylist:code:)","title":"init(sensitivityList: [VariableName], code: SynchronousBlock)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/processblock\/code","title":"let code: SynchronousBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/processblock\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/processblock\/sensitivitylist","title":"let sensitivityList: [VariableName]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/processblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/processblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/processblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/processblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/processblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/processblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/processblock","title":"ProcessBlock","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenblock\/when(statement:)","title":"case when(statement: WhenStatement)","type":"case"},{"path":"\/documentation\/vhdlparsing\/whenblock\/whenelse(statement:)","title":"case whenElse(statement: WhenElseStatement)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenblock\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/whenblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/whenblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/whenblock","title":"WhenBlock","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/init(value:condition:elseblock:)","title":"init(value: Expression, condition: Expression, elseBlock: AsynchronousExpression)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/condition","title":"let condition: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/elseblock","title":"let elseBlock: AsynchronousExpression","type":"property"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/value","title":"let value: Expression","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/whenelsestatement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenelsestatement\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/whenelsestatement\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/whenelsestatement","title":"WhenElseStatement","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/init(condition:value:)","title":"init(condition: Expression, value: Expression)","type":"init"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/condition","title":"let condition: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/value","title":"let value: Expression","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/whenstatement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whenstatement\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/whenstatement\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/whenstatement","title":"WhenStatement","type":"struct"},{"title":"Synchronous Blocks","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/casestatement\/init(condition:cases:)","title":"init(condition: Expression, cases: [WhenCase])","type":"init"},{"path":"\/documentation\/vhdlparsing\/casestatement\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/casestatement\/cases","title":"let cases: [WhenCase]","type":"property"},{"path":"\/documentation\/vhdlparsing\/casestatement\/condition","title":"let condition: Expression","type":"property"},{"path":"\/documentation\/vhdlparsing\/casestatement\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/casestatement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/casestatement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/casestatement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/casestatement\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/casestatement\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/casestatement\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/casestatement","title":"CaseStatement","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forloop\/init(iterator:range:body:)","title":"init(iterator: VariableName, range: VectorSize, body: SynchronousBlock)","type":"init"},{"path":"\/documentation\/vhdlparsing\/forloop\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forloop\/body","title":"let body: SynchronousBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/forloop\/iterator","title":"let iterator: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/forloop\/range","title":"let range: VectorSize","type":"property"},{"path":"\/documentation\/vhdlparsing\/forloop\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forloop\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/forloop\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forloop\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forloop\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/forloop\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/forloop\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/forloop","title":"ForLoop","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/ifblock\/ifelse(condition:ifblock:elseblock:)","title":"case ifElse(condition: Expression, ifBlock: SynchronousBlock, elseBlock: SynchronousBlock)","type":"case"},{"path":"\/documentation\/vhdlparsing\/ifblock\/ifstatement(condition:ifblock:)","title":"case ifStatement(condition: Expression, ifBlock: SynchronousBlock)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/ifblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/ifblock\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/ifblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/ifblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/ifblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/ifblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/ifblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/ifblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/ifblock","title":"IfBlock","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/blocks(blocks:)","title":"case blocks(blocks: [SynchronousBlock])","type":"case"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/casestatement(block:)","title":"case caseStatement(block: CaseStatement)","type":"case"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/forloop(loop:)","title":"case forLoop(loop: ForLoop)","type":"case"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/ifstatement(block:)","title":"case ifStatement(block: IfBlock)","type":"case"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/statement(statement:)","title":"case statement(statement: Statement)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/synchronousblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/synchronousblock\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/synchronousblock\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/synchronousblock","title":"SynchronousBlock","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencase\/init(condition:code:)","title":"init(condition: WhenCondition, code: SynchronousBlock)","type":"init"},{"path":"\/documentation\/vhdlparsing\/whencase\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencase\/code","title":"let code: SynchronousBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/whencase\/condition","title":"let condition: WhenCondition","type":"property"},{"path":"\/documentation\/vhdlparsing\/whencase\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencase\/othersnull","title":"static let othersNull: WhenCase","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencase\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/whencase\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencase\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencase\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencase\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/whencase\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/whencase","title":"WhenCase","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencondition\/expression(expression:)","title":"case expression(expression: Expression)","type":"case"},{"path":"\/documentation\/vhdlparsing\/whencondition\/others","title":"case others","type":"case"},{"path":"\/documentation\/vhdlparsing\/whencondition\/range(range:)","title":"case range(range: VectorSize)","type":"case"},{"path":"\/documentation\/vhdlparsing\/whencondition\/selection(expressions:)","title":"case selection(expressions: [Expression])","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencondition\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencondition\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencondition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/whencondition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencondition\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencondition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/whencondition\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/whencondition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/whencondition","title":"WhenCondition","type":"enum"},{"title":"Entity and Architecture Definitions","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecture\/init(body:entity:head:name:)","title":"init(body: AsynchronousBlock, entity: VariableName, head: ArchitectureHead, name: VariableName)","type":"init"},{"path":"\/documentation\/vhdlparsing\/architecture\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecture\/body","title":"let body: AsynchronousBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/architecture\/entity","title":"let entity: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/architecture\/head","title":"let head: ArchitectureHead","type":"property"},{"path":"\/documentation\/vhdlparsing\/architecture\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/architecture\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecture\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/architecture\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecture\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecture\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecture\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/architecture\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/architecture","title":"Architecture","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecturehead\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/vhdlparsing\/architecturehead\/init(statements:)","title":"init(statements: [HeadStatement])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecturehead\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/architecturehead\/statements","title":"let statements: [HeadStatement]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecturehead\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/architecturehead\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecturehead\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecturehead\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/architecturehead\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/architecturehead\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/architecturehead","title":"ArchitectureHead","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/entity\/init(name:port:generic:)","title":"init(name: VariableName, port: PortBlock, generic: GenericBlock?)","type":"init"},{"path":"\/documentation\/vhdlparsing\/entity\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/entity\/generic","title":"let generic: GenericBlock?","type":"property"},{"path":"\/documentation\/vhdlparsing\/entity\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/entity\/port","title":"let port: PortBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/entity\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/entity\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/entity\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/entity\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/entity\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/entity\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/entity\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/entity","title":"Entity","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/==(_:_:)","title":"static func == (Include, Include) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/include(statement:)","title":"case include(statement: UseStatement)","type":"case"},{"path":"\/documentation\/vhdlparsing\/include\/library(value:)","title":"case library(value: VariableName)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/rawvalue-swift.property","title":"var rawValue: String","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/rawvalue-swift.typealias","title":"Include.RawValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/include\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/include\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/include\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/include","title":"Include","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebody\/init(name:body:)","title":"init(name: VariableName, body: PackageBodyBlock)","type":"init"},{"path":"\/documentation\/vhdlparsing\/packagebody\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebody\/body","title":"let body: PackageBodyBlock","type":"property"},{"path":"\/documentation\/vhdlparsing\/packagebody\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/packagebody\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebody\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/packagebody\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebody\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebody\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/packagebody\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/packagebody\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/packagebody","title":"PackageBody","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/init(architectures:entities:includes:packages:packagebodies:)","title":"init(architectures: [Architecture], entities: [Entity], includes: [Include], packages: [VHDLPackage], packageBodies: [PackageBody])","type":"init"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/architectures","title":"let architectures: [Architecture]","type":"property"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/entities","title":"let entities: [Entity]","type":"property"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/includes","title":"let includes: [Include]","type":"property"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/packagebodies","title":"let packageBodies: [PackageBody]","type":"property"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/packages","title":"let packages: [VHDLPackage]","type":"property"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/vhdlfile\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlfile\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/vhdlfile\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/vhdlfile","title":"VHDLFile","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/init(name:statements:)","title":"init(name: VariableName, statements: [HeadStatement])","type":"init"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/name","title":"let name: VariableName","type":"property"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/statements","title":"let statements: [HeadStatement]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/vhdlpackage\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/vhdlpackage\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/vhdlparsing\/vhdlpackage\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vhdlparsing\/vhdlpackage","title":"VHDLPackage","type":"struct"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/swift\/equatable\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vhdlparsing\/swift\/equatable","title":"Equatable","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vhdlparsing\/swift\/hashable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/vhdlparsing\/swift\/hashable","title":"Hashable","type":"extension"}],"path":"\/documentation\/vhdlparsing\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/vhdlparsing","title":"VHDLParsing","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}